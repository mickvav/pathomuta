#!/usr/bin/perl
use strict;
use warnings;
use CGI;
sub Error($) {
  print CGI->header();
  print '<html><body><b>Error: '.$_[0].'</b></body></html>';
   exit(0);
}


my $GV_DIR=".";
my $GETSUBGRAPH_PATH='/usr/local/bin/getsubgraph.pl';
my $DOT_PATH='/usr/bin/dot';
my $q = CGI->new;
my $current_url=$q->url;
my $mode=$q->param('mode');
if(not(defined($mode))) {
  $mode = 'html';
} else {
  if(not($mode=~/svg|html|dot/)) {
    Error("Bad mode");
  };
};
my $file=$q->param('file');
if(not(defined($file))) {
   Error("file not defined");
};
if(not($file=~/^[a-zA-Z_\.-]+$/)) {
   Error("bad file name");
};
my $fullfile=$GV_DIR."/".$file;
if(not(-f $fullfile)) {
   Error("file not found");
};
my $keynode=$q->param('keynode');
if(not(defined($keynode))) { $keynode=''; };
if(not($keynode=~/^[a-zA-Z0-9-]+$/)) {
   open(FD,"<$fullfile") or Error("Can't open file");
   while(<FD>) {
     if(/^\s*([a-zA-Z0-9-]+)\s+\[/) {
       $keynode=$1;
       last;
     };
   };
   close FD;
   if($keynode eq '') { Error('File format error. No described nodes found'); };
};

my $n1=$q->param('n1');
if(not(defined($n1))) {
  $n1=1;
} elsif (not($n1=~/^-?\d+$/)) {
  $n1=1;
};
my $n2=$q->param('n2');
if(not(defined($n2))) {
  $n2=1;
} elsif (not($n2=~/^-?\d+$/)) {
  $n2=1;
};

open(FD,"-|","$GETSUBGRAPH_PATH $fullfile $keynode $n1 $n2") or Error("Can't open pipe");

if($mode eq 'html') {
   print $q->header("text/html");
   print "<html>
<style>
div.button {
  position: absolute;
  background-color: #ADADAD;
  font-family: monospace;
  width: 20px;
  height: 20px;
  top: 10px;
  text-align: center;
  vertical-align: middle;
  line-height: 20px;
}
div.container {
  position: fixed;
  background-color: #DDDDDD;
  padding: 5px;
  width: 120px;
  height: 40px;
  left: 40px;
  vertical-align: middle;
}
div.indicator {
  position: absolute;
  background-color: #EEEEEE;
  left: 80px;
  height: 20px;
  width: 20px;
  top: 10px;
  vertical-align: middle;
}
#n1m {
  left: 60px;
}
#n1p {
  left: 100px;
}
#n2m {
  left: 60px;
}
#n2p {
  left: 100px;
}
</style>
<script language=\"JavaScript\">
  function reload(u,f,kn,n1,n2) {
    window.location.assign(u+'?mode=html&file='+f+'&keynode='+kn+'&n1='+n1+'&n2='+n2);
  };
</script>
<body>
<object type=\"image/svg+xml\" data=\"$current_url?mode=svg&file=$file&keynode=$keynode&n1=$n1&n2=$n2\">
   <span>Your browser doesn't support SVG images</span>
</object>
<br>
<div class=\"container\" style=\"top:40px\">Up
<div id=\"n1m\" class=\"button\" onclick=\"reload('$current_url','$file','$keynode','".($n1-1)."','$n2');\">-</div>
<div id=\"n1p\" class=\"button\" onclick=\"reload('$current_url','$file','$keynode','".($n1+1)."','$n2');\">+</div>
<div class=\"indicator\">$n1</div>
</div>
<div class=\"container\" style=\"top:90px\">Down
<div id=\"n2m\" class=\"button\" onclick=\"reload('$current_url','$file','$keynode','$n1','".($n2-1)."');\">-</div>
<div id=\"n2p\" class=\"button\" onclick=\"reload('$current_url','$file','$keynode','$n1','".($n2+1)."');\">+</div>
<div class=\"indicator\">$n2</div>
</div>
<a href=\"$current_url?mode=dot&file=$file&keynode=$keynode&n1=$n1&n2=$n2\" />Download as .dot file</a>
</body>
</html>
";
   exit(0);
};

my @lines=();
while(<FD>) {
   chomp;
   if(/^\s*(strict\s+)?(di)?graph\s+([A-Za-z0-9-"])\s+{/) {
     push @lines, $_;
   } elsif 
     (/^\s*([0-9A-Za-z-"]+)\s+(\[.*\]);?\s*$/) {
     my $desc=$2;
     my $id=$1;
     my $full_new_url="$current_url?file=$file&keynode=$id&n1=$n1&n2=$n2";
     if($desc=~/(URL|href)="([^"]+)"/) {
        my $url=$1;
        if($url=~/^javascript:(.*)/) {
           my $oldjs=$1;
           $url=~s/^javascript:/javascript:window.open("$full_new_url","_self");$oldjs/;
        } else {
           $url=$full_new_url;
        };
        $desc=~s/(URL|href)="([^"]+)"/$1="$url"/;
     } else { # No url in description. Add one
        $desc=~s/](;)?\s*$/ URL="$full_new_url"]/;
     };
     push @lines, "$id $desc";
     
   } else {
     push @lines, $_;
   };
};

close FD;
if($mode eq 'dot') {
  print $q->header("text/vnd.graphviz");
  
  foreach my $line (@lines) {
    print $line."\n";
  };
  exit(0);
};
open(FD,"|-","$DOT_PATH -Tsvg") or Error("Can't pipe to dot");
print $q->header("image/svg+xml");
$|=1;
my $newstroke=undef;
foreach my $line (@lines) {
#  if(not (
   $line=~s/^\s*$keynode\s+(\[.*)color="[^"]*"/$keynode $1color="1.0 0.8 0.8"/;
#  ) ) {
#    $line=~s/^\s*$keynode\s+[/$keynode [color="1 0 0" /;
#  };
  print FD $line."\n";
};
close(FD);

